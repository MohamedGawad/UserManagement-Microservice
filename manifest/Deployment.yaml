#       Copyright 2017-2019 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# oc create secret generic mysql-conn --from-literal=id=admin --from-literal=pwd=QZFTSJZQRECWSCGD --from-literal=host=sl-eu-lon-2-portal.1.dblayer.com --from-literal=port=21487 --from-literal=db=BSU01-001 -n bsu01-chatbot-dev
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: usermanagement
  labels:
    app: usermanagement
    solution: bsu-chatbot
  annotations:
    prism.subkind: Liberty
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: usermanagement
        solution: bsu-chatbot
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
    spec:
      containers:
      - name: usermanagement
#       image: usermanagement:latest # Microservice Builder
        image: de.icr.io/chatbot-bsu-dev/usermanagement:latest
#       image: registry.ng.bluemix.net/stock_trader/usermanagement:latest # IBM Kubernetes Service
       # image: ibmstocktrader/usermanagement:latest # Docker Hub
        env:
          - name: JDBC_HOST
            valueFrom:
              secretKeyRef:
                name: mysql-conn
                key: host
          - name: JDBC_PORT
            valueFrom:
              secretKeyRef:
                name: mysql-conn
                key: port
          - name: JDBC_DB
            valueFrom:
              secretKeyRef:
                name: mysql-conn
                key: db
          - name: JDBC_ID
            valueFrom:
              secretKeyRef:
                name: mysql-conn
                key: id
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-conn
                key: pwd
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullSecrets:
            - name: default-de-icr-io
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          initialDelaySeconds: 90
          periodSeconds: 15
          successThreshold: 1
          failureThreshold: 5 # Allow a little time to exec into the pod to grab FFDCs before it's killed
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
      #  Uncomment the following lines to get the keystore from the secret
#        volumeMounts:
#        - mountPath: /keystores
#          name: kafka-keystore-volume
#          readOnly: true
#      volumes:
#      - name: kafka-keystore-volume
#        secret:
#         secretName: kafka-keystore
---
#Deploy the autoscaler
#apiVersion: autoscaling/v1
#kind: HorizontalPodAutoscaler
#metadata:
#  name: usermanagement-hpa
#  labels:
#    solution: usermanagement
#spec:
#  scaleTargetRef:
#    apiVersion: apps/v1
#    kind: Deployment
#    name: usermanagement
#  maxReplicas: 10
#  minReplicas: 2
#  targetCPUUtilizationPercentage: 60
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: usermanagement-service
  labels:
    app: usermanagement
    solution: bsu-chatbot
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: usermanagement
    solution: bsu-chatbot
---   
#Configure the ingress 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/app-root: "/usermanagement"
  name: usermanagement-ingress
  labels:
    app: usermanagement
    solution: bsu-chatbot
spec:
  rules:
  - host:
    http:
      paths:
      - path: /usermanagement
        backend:
          serviceName: usermanagement-service
          servicePort: 9443
